'use strict';

module.exports = function(argv) {
    switch (argv._[2]) {
        case ('classify'):
            console.log('');
            console.log('Given a parcel &/ a building polygon layer, classify address points as one of');
            console.log('  point, building, parcel');
            console.log('');
            console.log('usage: index.js classify [--buildings <buildings.geojson> ] [--parcels <parcels.geojson> ]');
            console.log('                         [--input|-i <addresses.geojson>] [--output|-o <OUTFILE>]');
            console.log('                         [--database|--db <DATABASE>] [--hecate]');
            console.log('');
            console.log('[options]:');
            console.log('   --input|-i <FILE>         Addresses to classify in PT2ITP Format');
            console.log('   --output|-o <OUTFILE>     File to write classified addresses to in hecate format ');
            console.log('   --db  <DATABASE>          Database to use as a backend');
            console.log('   --buildings <FILE>        GeoJSONLD Building Polygons');
            console.log('   --parcels <FILE>          GeoJSONLD Parcel Polygons');
            console.log('   --hecate                  Expect Hecate input & produce hecate output');
            break;
        case ('testcsv'):
            console.log('');
            console.log('Take Carmen Indexes and test them against a given CSV file');
            console.log('  Note that the carmen indexes will only have address data, not place,postcode,etc so ensure the test');
            console.log('  fixtures do not contain this data');
            console.log('');
            console.log('usage: index.js testcsv [--config <CONFIG.json> ] [--index <INDEX.zstd> ] [--output|-o <OUTFILE>]');
            console.log('                     [--input|-i <FILE.csv>]');
            console.log('');
            console.log('[options]:');
            console.log('   --config                      Path to Carmen Config JSON');
            console.log('   --index                       Path to carmen compatible index');
            console.log('   --output|-o <OUTFILE>         File to write test output to');
            console.log('   --input|-i <FILE.csv>         Input CSV of test data in the format lon,lat,address');
            break;
        case ('test'):
            console.log('');
            console.log('Take Carmen Indexes and test them for completeness against the original input address data');
            console.log('  This test is even more useful when you build the indexes after stripping the points away to');
            console.log('  check for complteness of the ITP lines only. See strip mode');
            console.log('');
            console.log('usage: index.js test [--config <CONFIG.json> ] [--index <INDEX.zstd> ] [--output|-o <OUTFILE>]');
            console.log('                     [--database|--db <DATABASE>] [--languages=<CODE, ...>]');
            console.log('');
            console.log('[options]:');
            console.log('   --config                                 Path to Carmen Config JSON');
            console.log('   --index                                  Path to carmen compatible index');
            console.log('   --database|--db <DATABASE>               Orignal database used to gen the index - used for addresses to test');
            console.log('   --output|-o <OUTFILE>                    File to write problematic addresses to');
            console.log('   --test-ephemeral                         By default ephermal addresses are not tested, this enabled testing them');
            console.log('   --languages=<ISO 639-1,ISO 639-1,...>    [optional] Language codes of abbreviation tokens to match');
            break;
        case ('debug'):
            console.log('');
            console.log('Start up an interactive web server to visualize how matches were made between network/addresses');
            console.log('');
            console.log('usage: index.js debug [--itp <ITP GeoJSON>] [--db <DATABASE>] [--skip-import]');
            console.log('');
            console.log('[options]:');
            console.log('   --itp <ITP GeoJSON>             Generated ITP data [optional if --skip-import is used]');
            console.log('   --db  <DATABASE>                Database to use as a backend');
            console.log('   --skip-import                   [optional] Assume database already has proper data/tables');
            break;
        case ('stat'):
            console.log('');
            console.log('Generate stats about addresses in the computed ITP file or the address/network input files');
            console.log('');
            console.log('usage index.js stats <GeoJSON> [--bounds <Boundaries File>]');
            console.log('');
            console.log('[options]:');
            console.log('   <ITP GeoJSON>                Generated ITP data');
            console.log('   --bounds <FILE>              [optional] Given a set of line delimited GeoJSON polygons, output stats for each');
            console.log();
            break;
        case ('map'):
            console.log('');
            console.log('Given a road network and a set of address points as line delimited geojson; output an interpolation network');
            console.log('');
            console.log('usage: index.js map [--in-network=<FILE.geojson>] [--in-address=<FILE.geojson>] [--output=<FILE.geojson>]');
            console.log('                    [--error-network <FILE>] [--error-address <FILE>] [--languages=<CODE, ...>]');
            console.log('                    [--post <cardinality>,...] [--intersections] [--props <prop>,...] [--warn <FILE]');
            console.log('');
            console.log('[options]:');
            console.log('   --in-network=<FILE.geojson>              geojson of street network');
            console.log('   --in-address=<FILE.geojson>              geojson of address points');
            console.log('   --db="<DATABASE>"                        Name of database to connect to w/ user "postgres"');
            console.log('   --output=<FILE.geojson>                  output generated ITP lines');
            console.log('   --post <cardinality>,...                 [optional] Optional PostProcessing Steps');
            console.log('          cardinality                          Add cardinal prefix/postfix as synonyms');
            console.log('                                                 ie: Main St S => Main St S,S Main St');
            console.log('          discard-bad-orphans                   Discard orphan address clusters with only one address and only numeric,');
            console.log('                                                  only punctuation carmen:text, or no override:postcode property');
            console.log('   --languages=<ISO 639-1,ISO 639-1,...>    [optional] Language codes of abbreviation tokens to match');
            console.log('   --props=<Prop,Prop,...>                  [optional] List of properties to output that were included in');
            console.log('                                                the input GeoJSON');
            console.log('   --country=<ISO3166-1 Alpha2>             [optional] Optionally populate carmen:geocoder_stack');
            console.log('   --region=<ISO3166-2>                     [optional] Used by some "map" scripts to alter input text. IE state highways');
            console.log('   --intersections                          [optional] Generate and include intersections in the final output');
            console.log('   --debug                                  [optional] Gives much richer info for `debug` mode module');
            console.log('   --error-network <FILE>                   [optional] Output invalid features to a given file');
            console.log('   --error-map <FILE>                       [optional] Output invalid features to a given file');
            console.log('   --warn <FILE>                            [optional] Output build warnings to a file');
            break;
        case ('conflate'):
            console.log('');
            console.log('Given a new address file, apply it to an existing address file, deduping and conflating where possible');
            console.log('');
            console.log('usage: index.js conflate [--in-addresses=<FILE>] [--in-persistent=<FILE>] [--db <DATABASE>]');
            console.log('                    [--output <FILE>] [--languages=<CODE, ...>] [--country=<CODE> ] [--region <CODE>]');
            console.log('                    [--error-persistent <FILE>] [--error-addresses <FILE>]');
            console.log('');
            console.log('[options]:');
            console.log('   --in-addresses=<FILE.geojson>             line-delimited geojson of new address features');
            console.log('   --in-persistent=<FILE.geojson>            line-delimited geojson of persistent/existing address');
            console.log('   --db="<DATABASE>"                         Name of database to connect to w/ user "postgres"');
            console.log('   --output=<FILE.geojson>                   output line-delimited geojson diff of new addresses');
            console.log('   --error-persistent=<FILE>                 [optional] File to log persistent address import errors');
            console.log('   --languages=<ISO 639-1,ISO 639-1,...>     [optional] Language codes of abbreviation tokens to match');
            console.log('   --country=<ISO3166-1 Alpha2>              [optional]');
            console.log('   --region=<ISO3166-2>                      [optional]');
            break;
        case ('dedupe'):
            console.log('');
            console.log('Remove duplicates witin a given address file');
            console.log('');
            console.log('usage: index.js dedupe [--input=<FILE>] [--output <FILE>] [--languages=<CODE, ...>]');
            console.log('                   [--db <DATABASE] [--hecate] [--buildings=<FILE>]');
            console.log('');
            console.log('Note: by default will read from STDIN and output to STDOUT');
            console.log('');
            console.log('[options]:');
            console.log('   --db <DATABASE>                           [optional] Postgres database to run analysis in');
            console.log('   --input=<FILE.geojson>                    [optional] line-delimited geojson of address features');
            console.log('   --buildings=<FILE.geojson>                [optional] line-delimited geojson of polygonal buildings');
            console.log('                                               to use as bounds for deduping');
            console.log('   --output=<FILE.geojson>                   [optional] line-delimited geojson of deduped features to write to');
            console.log('   --languages=<ISO 639-1,ISO 639-1,...>     [optional] Language codes of abbreviation tokens to match');
            console.log('   --hecate                                  [optional] output duplicates as hecate deletions');
            break;
        case ('strip'):
            console.log('');
            console.log('Strip out Address Points from map mode (ITP) output');
            console.log('  This is useful for test mode or also if you just want the Interpolated lines and not points');
            console.log('');
            console.log('usage: index.js strip [--input=<FILE.geojson>] [--output=<FILE.geojson>]');
            console.log('');
            console.log('[options]:');
            break;
        case ('convert'):
            console.log('');
            console.log('Convert a Line-Delimited GeoJSON Features into a single FeatureCollection');
            console.log('');
            console.log('Note: by default will read from STDIN and output to STDOUT');
            console.log('');
            console.log('usage: index.js convert [--input=<FILE.geojson>] [--output=<FILE.geojson>]');
            console.log('');
            console.log('[options]:');
            console.log('   --output=<FILE.geojson>         Single GeoJSON FeatureCollection');
            console.log('   --input=<FILE.geojson>          Line delimited GeoJSON FeatureCollections');
            console.log('');
            break;
        case ('consensus'):
            console.log('');
            console.log('Calculate agreement metrics for a set of input address datasets');
            console.log('');
            console.log('usage: index.js consensus [<FILE>, <FILE>, ...] [--db <DATABASE>] [--threshold <INTEGER>]');
            console.log('                    [--languages=<CODE, ...>] [--country=<CODE> ] [--region <CODE>]');
            console.log('                    [--error-sources <FILE>] [--error-query-points <FILE>]');
            console.log('');
            console.log('[options]:');
            console.log('   <FILE.geojson>                            Line-delimited geojson of address features');
            console.log('   --query-points=<FILE>                     Set of address points to serve as test queries against the source data');
            console.log('   --db="<DATABASE>"                         Name of database to connect to w/ user "postgres". Defaults to "consensus".');
            console.log('   --threshold="<INTEGER>"                   [optional] Maximum allowed dissimilarity between points. Defaults to 25.');
            console.log('   --error-sources=<FILE>                    [optional] File to log source address import errors');
            console.log('   --error-query-points=<FILE>               [optional] File to log query point import errors');
            console.log('   --languages=<ISO 639-1,ISO 639-1,...>     [optional] Language codes of abbreviation tokens to match');
            console.log('   --country=<ISO3166-1 Alpha2>              [optional]');
            console.log('   --region=<ISO3166-2>                      [optional]');
            break;
        default:
            console.log('usage: index.js <command> [--version] [--help]');
            console.log('');
            console.log('<command>:');
            console.log('    help                      Displays this message');
            console.log('    convert  [--help]         Convert default line delimited geojson to featurecollection');
            console.log('    conflate [--help]         Given a new address file, apply it to an existing address file');
            console.log('    clean    [--help]         Run address or network data through a given map script, returning the result');
            console.log('    dedupe   [--help]         Dedupe like addresses from a given input file');
            console.log('    strip    [--help]         Remove PTs from map output - leaving only ITP network segments');
            console.log('    map      [--help]         Create interpolation from tiles');
            console.log('    test     [--help]         Use raw addresses to query generated ITP output to check for completeness');
            console.log('    stat     [--help]         Print address stats about a given itp.geojson file');
            console.log('    debug    [--help]         Start web server for visually debugging pt 2 network matches');
            console.log('');
            console.log('[options]:');
            console.log('    --version, -v           Displays version information');
            console.log('    --help                  Prints this help message');
            console.log('');
            break;
    }
};
