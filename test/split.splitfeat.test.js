const fs = require('fs');
const test = require('tape');
const pg = require('pg');
const { Split, SplitFeat } = require('../lib/map/split');
const Index = require('../lib/map/index');
const turf = require('@turf/turf');

const db = require('./lib/db');
db.init(test);

const pg_init = require('../native/index.node').pg_init;
const pg_optimize = require('../native/index.node').pg_optimize;

test('SplitFeat - from db', (t) => {
    const pool = new pg.Pool({
        max: 10,
        user: 'postgres',
        database: 'pt_test',
        idleTimeoutMillis: 30000
    });

    t.test('SplitFeat - from db - create tables', (q) => {
        const index = new Index(pool);

        pg_init();

        index.init((err) => {
            q.error(err);
            q.end();
        });
    });

    t.test('SplitFeat - from db - populate', (q) => {
        pool.query(`
            BEGIN;

            INSERT INTO network_cluster (
                name,
                address,
                geom
            ) VALUES (
                '[{ "display": "Dulaney Valley Road", "tokenized": "dulaney vly rd", "tokenless": "dulaney" }]',
                1,
                ST_SetSRID(ST_GeomFromGeoJSON('{"type":"MultiLineString","coordinates":[[[-76.576516,39.464153,1],[-76.5769,39.463908,1],[-76.577122,39.463783,1],[-76.577421,39.463643,1],[-76.577877,39.463512,1],[-76.578492,39.463369,1]],[[-76.602014,39.402035,1],[-76.601978,39.402217,1],[-76.601954,39.402319,1],[-76.601917,39.402539,1],[-76.601845,39.402765,1]],[[-76.578492,39.463369,1],[-76.582147,39.462461,1],[-76.582404,39.462397,1]],[[-76.600369,39.41315,1],[-76.600366,39.413354,1]],[[-76.600406,39.411645,1],[-76.600382,39.412418,1]],[[-76.600492,39.410394,1],[-76.600451,39.410653,1],[-76.60041,39.41088,1],[-76.600336,39.411446,1],[-76.600406,39.411645,1]],[[-76.593006,39.450177,1],[-76.593305,39.449648,1],[-76.594053,39.448353,1]],[[-76.574924,39.464219,1],[-76.574729,39.464269,1],[-76.574219,39.464399,1],[-76.57344,39.46457,1],[-76.573092,39.464651,1],[-76.572714,39.46473,1],[-76.572136,39.464832,1],[-76.571591,39.464935,1],[-76.571038,39.46504,1],[-76.570812,39.46509,1],[-76.570619,39.465133,1],[-76.570455,39.465176,1],[-76.57018,39.465255,1],[-76.569994,39.465303,1],[-76.56971,39.465373,1],[-76.569342,39.465465,1],[-76.569079,39.465541,1],[-76.568736,39.465632,1],[-76.568498,39.4657,1],[-76.56828,39.465742,1],[-76.567992,39.465782,1],[-76.567658,39.465828,1],[-76.567398,39.465864,1],[-76.567136,39.465905,1],[-76.566835,39.46594,1],[-76.566575,39.465982,1],[-76.566107,39.466057,1],[-76.566008,39.466069,1],[-76.56593,39.466085,1],[-76.565675,39.466123,1],[-76.565167,39.466205,1],[-76.56441,39.466322,1],[-76.563693,39.466431,1],[-76.562984,39.466548,1],[-76.562633,39.466601,1]],[[-76.601239,39.405939,1],[-76.6012,39.40607,1]],[[-76.600376,39.412627,1],[-76.600373,39.412857,1]],[[-76.582404,39.462397,1],[-76.582729,39.462317,1],[-76.582965,39.462269,1],[-76.583168,39.462246,1],[-76.583408,39.462229,1],[-76.583675,39.462234,1],[-76.583948,39.462265,1],[-76.58421,39.462314,1],[-76.584724,39.462423,1],[-76.584838,39.462447,1],[-76.585182,39.462519,1],[-76.585538,39.46257,1],[-76.58583,39.462585,1],[-76.586165,39.462579,1],[-76.586339,39.462563,1],[-76.586438,39.462554,1],[-76.586804,39.462493,1],[-76.587058,39.462431,1],[-76.58736,39.462336,1],[-76.587632,39.462222,1],[-76.58787,39.462106,1],[-76.588141,39.461937,1],[-76.588385,39.461763,1],[-76.588681,39.46153,1],[-76.588933,39.461323,1],[-76.589066,39.461203,1],[-76.589203,39.461071,1]],[[-76.600382,39.412418,1],[-76.600376,39.412627,1]],[[-76.589203,39.461071,1],[-76.589278,39.460996,1],[-76.589364,39.460892,1]],[[-76.600406,39.411645,1],[-76.600489,39.411464,1],[-76.600499,39.411338,1]],[[-76.601587,39.40416,1],[-76.60152,39.404488,1]],[[-76.589364,39.460892,1],[-76.589423,39.460819,1],[-76.58947,39.460761,1],[-76.589582,39.4606,1],[-76.58975,39.460303,1],[-76.589939,39.459931,1],[-76.5905,39.458797,1],[-76.59147,39.456834,1],[-76.591905,39.455952,1],[-76.592051,39.455657,1],[-76.592176,39.455388,1],[-76.592216,39.455281,1],[-76.592274,39.455124,1],[-76.592345,39.454874,1],[-76.592391,39.454595,1],[-76.592422,39.454321,1],[-76.592426,39.454018,1],[-76.592456,39.451923,1],[-76.592464,39.451671,1],[-76.592471,39.451621,1],[-76.592494,39.451435,1],[-76.592544,39.451218,1],[-76.592609,39.451008,1],[-76.592679,39.450817,1],[-76.592798,39.45056,1],[-76.593006,39.450177,1]],[[-76.601424,39.405984,1],[-76.60148,39.405684,1],[-76.601504,39.405536,1],[-76.601565,39.405193,1]],[[-76.601334,39.4054,1],[-76.601239,39.405939,1]],[[-76.600366,39.413354,1],[-76.600345,39.413727,1],[-76.600316,39.413967,1]],[[-76.601882,39.403391,1],[-76.601901,39.403272,1],[-76.601947,39.402979,1],[-76.602005,39.402702,1],[-76.602099,39.402235,1],[-76.602138,39.402172,1],[-76.602205,39.402116,1]],[[-76.562633,39.466601,1],[-76.562225,39.466653,1],[-76.561805,39.466717,1],[-76.561565,39.466755,1],[-76.561022,39.466834,1],[-76.560887,39.466856,1],[-76.560435,39.46693,1],[-76.559938,39.467008,1],[-76.558849,39.467181,1],[-76.558268,39.467274,1],[-76.557817,39.467346,1],[-76.557552,39.467389,1],[-76.557331,39.46743,1],[-76.556974,39.467507,1],[-76.556764,39.467556,1],[-76.55646,39.467645,1],[-76.556336,39.467684,1],[-76.555562,39.467919,1],[-76.552434,39.468888,1],[-76.552262,39.468941,1],[-76.552127,39.468977,1],[-76.551989,39.469007,1],[-76.551815,39.469031,1],[-76.551611,39.469046,1],[-76.551363,39.469049,1],[-76.551169,39.469033,1],[-76.551079,39.469018,1],[-76.550969,39.468993,1],[-76.550842,39.468961,1],[-76.550705,39.468921,1],[-76.550493,39.468848,1],[-76.550352,39.468784,1],[-76.550124,39.46868,1],[-76.549697,39.468478,1],[-76.547758,39.46756,1],[-76.547661,39.467514,1],[-76.547553,39.467455,1],[-76.547479,39.467405,1],[-76.547417,39.46735,1],[-76.547329,39.467275,1]],[[-76.601276,39.406995,1],[-76.601292,39.406892,1],[-76.60137,39.406369,1]],[[-76.595458,39.445992,1],[-76.595553,39.445832,1]],[[-76.595553,39.445832,1],[-76.596122,39.444875,1],[-76.596405,39.444372,1],[-76.596528,39.444116,1],[-76.596642,39.443864,1],[-76.596711,39.44367,1],[-76.596779,39.443434,1],[-76.596843,39.44319,1],[-76.596884,39.442967,1],[-76.596913,39.442723,1],[-76.596926,39.442509,1],[-76.596928,39.441396,1],[-76.59692,39.441196,1],[-76.596918,39.44022,1]],[[-76.600499,39.411338,1],[-76.600558,39.410891,1],[-76.600593,39.410672,1],[-76.600693,39.410131,1],[-76.600774,39.409686,1]],[[-76.601737,39.404221,1],[-76.601748,39.404158,1],[-76.601804,39.403841,1]],[[-76.600056,39.414926,1],[-76.600155,39.414631,1],[-76.60021,39.414429,1],[-76.600267,39.414208,1],[-76.600316,39.413967,1]],[[-76.599893,39.41542,1],[-76.600056,39.414926,1]],[[-76.601399,39.406105,1],[-76.601424,39.405984,1]],[[-76.601804,39.403841,1],[-76.601882,39.403391,1]],[[-76.594053,39.448353,1],[-76.594626,39.4474,1],[-76.595096,39.446604,1],[-76.595325,39.446211,1],[-76.595458,39.445992,1]],[[-76.601024,39.408414,1],[-76.601042,39.408312,1],[-76.601115,39.40794,1],[-76.601167,39.407678,1]],[[-76.596918,39.44022,1],[-76.596898,39.436518,1],[-76.596897,39.436472,1],[-76.596889,39.434313,1],[-76.596867,39.431962,1],[-76.596848,39.431778,1],[-76.596803,39.43161,1],[-76.59674,39.431453,1],[-76.596661,39.431306,1],[-76.596543,39.431121,1],[-76.596502,39.431071,1],[-76.596388,39.430936,1],[-76.596057,39.430574,1],[-76.595885,39.430368,1],[-76.595766,39.430187,1],[-76.595668,39.430005,1],[-76.595582,39.429797,1],[-76.595531,39.429567,1],[-76.59552,39.4294,1],[-76.595526,39.429192,1],[-76.595553,39.429042,1],[-76.595606,39.42884,1],[-76.595626,39.428777,1],[-76.595632,39.428759,1],[-76.595783,39.428275,1],[-76.595969,39.42764,1]],[[-76.601669,39.404603,1],[-76.601685,39.404512,1],[-76.601737,39.404221,1]],[[-76.6012,39.40607,1],[-76.601134,39.406453,1],[-76.601073,39.406839,1],[-76.600943,39.407652,1],[-76.600765,39.408823,1],[-76.600711,39.409208,1],[-76.600695,39.409302,1]],[[-76.601746,39.403258,1],[-76.601724,39.403371,1],[-76.601587,39.40416,1]],[[-76.600373,39.412857,1],[-76.600369,39.41315,1]],[[-76.600774,39.409686,1],[-76.600857,39.409227,1]],[[-76.595969,39.42764,1],[-76.596092,39.427106,1]],[[-76.60152,39.404488,1],[-76.60151,39.404542,1],[-76.601503,39.404581,1],[-76.601424,39.405054,1],[-76.601342,39.405355,1],[-76.601334,39.4054,1]],[[-76.596092,39.427106,1],[-76.596147,39.426882,1],[-76.596197,39.426705,1]],[[-76.599795,39.415695,1],[-76.599893,39.41542,1]],[[-76.596197,39.426705,1],[-76.596268,39.426468,1],[-76.596369,39.42617,1],[-76.596486,39.425856,1],[-76.596596,39.425604,1],[-76.596652,39.425461,1],[-76.596766,39.425172,1],[-76.596985,39.424507,1],[-76.597012,39.424424,1],[-76.597301,39.423454,1],[-76.597402,39.423097,1],[-76.597594,39.422482,1],[-76.597965,39.421246,1],[-76.598288,39.420189,1],[-76.598626,39.419155,1],[-76.598739,39.41881,1],[-76.59892,39.418253,1],[-76.599305,39.417081,1],[-76.599795,39.415695,1]],[[-76.60137,39.406369,1],[-76.601382,39.406292,1],[-76.601399,39.406105,1]],[[-76.547329,39.467275,1],[-76.54726,39.467217,1],[-76.547139,39.467144,1],[-76.547081,39.467117,1],[-76.547032,39.467109,1],[-76.546996,39.467106,1],[-76.546973,39.467109,1],[-76.546929,39.46712,1],[-76.546904,39.467136,1],[-76.546869,39.467158,1],[-76.546825,39.467207,1],[-76.546797,39.467264,1],[-76.546605,39.467657,1],[-76.54603,39.468831,1],[-76.54575,39.469372,1],[-76.545512,39.469869,1],[-76.545393,39.470077,1],[-76.545251,39.47027,1],[-76.545103,39.470416,1],[-76.544997,39.470512,1],[-76.544834,39.47064,1],[-76.544761,39.470694,1],[-76.544603,39.470779,1],[-76.544457,39.470848,1],[-76.54441,39.470873,1],[-76.544018,39.471032,1],[-76.543776,39.471134,1],[-76.543538,39.471234,1],[-76.543104,39.471411,1],[-76.54231,39.471739,1],[-76.541944,39.47189,1],[-76.541123,39.472255,1],[-76.540592,39.472522,1],[-76.540341,39.472663,1],[-76.540136,39.472792,1],[-76.539991,39.472901,1],[-76.539904,39.472969,1],[-76.539809,39.473066,1],[-76.539338,39.473639,1],[-76.539125,39.473937,1],[-76.538945,39.474136,1],[-76.538784,39.474323,1],[-76.538611,39.474504,1],[-76.538454,39.474664,1],[-76.53804,39.475066,1],[-76.537532,39.475552,1],[-76.537352,39.475719,1],[-76.537156,39.475914,1],[-76.536873,39.476194,1],[-76.536729,39.476352,1],[-76.536634,39.476469,1],[-76.53606,39.477108,1],[-76.535863,39.477352,1],[-76.535423,39.477853,1],[-76.535117,39.478209,1],[-76.534695,39.478798,1],[-76.534547,39.47901,1],[-76.534403,39.479203,1],[-76.534359,39.479259,1],[-76.534185,39.479518,1],[-76.534044,39.479694,1],[-76.533781,39.479982,1],[-76.533702,39.480069,1],[-76.533628,39.480134,1],[-76.533574,39.480181,1],[-76.533423,39.480326,1],[-76.533282,39.480447,1],[-76.532651,39.480912,1],[-76.532109,39.481308,1],[-76.531774,39.481545,1],[-76.531448,39.481746,1],[-76.529239,39.483128,1],[-76.529073,39.483223,1],[-76.52891,39.483339,1],[-76.528772,39.483441,1],[-76.528694,39.483515,1],[-76.528616,39.483592,1],[-76.528538,39.483692,1],[-76.52846,39.483829,1],[-76.528302,39.484154,1],[-76.528199,39.484381,1],[-76.528119,39.484571,1],[-76.528069,39.484715,1],[-76.528031,39.484818,1],[-76.527997,39.484989,1],[-76.527969,39.485176,1],[-76.527957,39.485676,1],[-76.527948,39.4859,1],[-76.527937,39.486051,1],[-76.527915,39.486228,1],[-76.527783,39.487001,1],[-76.527729,39.487231,1],[-76.527653,39.487481,1],[-76.527578,39.487635,1],[-76.527503,39.487759,1],[-76.527452,39.487833,1],[-76.527384,39.487909,1],[-76.527238,39.488027,1],[-76.527171,39.488069,1],[-76.52705,39.488145,1],[-76.526918,39.488227,1],[-76.526676,39.488351,1],[-76.526464,39.488439,1],[-76.526436,39.488449,1],[-76.526212,39.488525,1],[-76.525626,39.488683,1],[-76.525343,39.488756,1],[-76.525136,39.488803,1],[-76.524699,39.488927,1],[-76.524397,39.489011,1],[-76.52425,39.48906,1],[-76.524132,39.489102,1],[-76.52397,39.489178,1],[-76.523305,39.489583,1],[-76.523107,39.489698,1],[-76.522888,39.489815,1]],[[-76.601565,39.405193,1],[-76.601669,39.404603,1]],[[-76.601845,39.402765,1],[-76.601833,39.402801,1],[-76.601746,39.403258,1]],[[-76.576516,39.464153,1],[-76.576371,39.464027,1],[-76.576276,39.463968,1],[-76.576202,39.463946,1],[-76.576118,39.463939,1],[-76.576024,39.463953,1],[-76.575812,39.464002,1],[-76.57536,39.46411,1],[-76.57509,39.464178,1],[-76.574924,39.464219,1]],[[-76.600857,39.409227,1],[-76.600978,39.408678,1],[-76.601024,39.408414,1]],[[-76.601167,39.407678,1],[-76.601226,39.407312,1],[-76.601276,39.406995,1]],[[-76.600695,39.409302,1],[-76.600492,39.410394,1]]]}'), 4326)
            );

            INSERT INTO address_cluster (
                name,
                geom
            ) VALUES (
                '[{ "display": "DULANEY VALLEY ROAD", "tokenized": "dulaney vly rd", "tokenless": "dulaney" }]',
                ST_SetSRID(ST_GeomFromGeoJSON('{"type":"MultiPoint","coordinates":[[-76.554825,39.460839,1],[-76.567178,39.462854,2],[-76.597763,39.442952,3],[-76.597381,39.438022,4],[-76.599005,39.431047,5],[-76.599332,39.415862,6]]}'), 4326)
            );

            INSERT INTO address (
                number,
                output,
                props
            ) VALUES (
                100,
                false,
                '{"postcode": "1"}'
            );

            INSERT INTO address (
                number,
                output,
                props
            ) VALUES (
                200,
                false,
                '{"postcode": "2"}'
            );

            INSERT INTO address (
                number,
                output,
                props
            ) VALUES (
                300,
                false,
                '{"postcode": "3"}'
            );
            INSERT INTO address (
                number,
                output,
                props
            ) VALUES (
                400,
                true,
                '{"postcode": "4"}'
            );
            INSERT INTO address (
                number,
                output,
                props
            ) VALUES (
                500,
                true,
                '{"postcode": "5"}'
            );
            INSERT INTO address (
                number,
                output,
                props
            ) VALUES (
                600,
                true,
                '{"postcode": "6"}'
            );

            COMMIT;
        `, (err) => {
            q.error(err);

            pg_optimize();

            Split.prepare(pool, (err, res) => {
                q.error(err);
                q.end();
            });
        });
    });

    t.test('SplitFeat - from db - create object', (q) => {
        SplitFeat.from_id(pool, 1, (err, feat) => {
            q.error(err, 'no error');
            q.ok(feat instanceof SplitFeat, 'instanceof SplitFeat');

            q.deepEquals(feat.name, [{
                display: 'Dulaney Valley Road',
                tokenized: 'dulaney vly rd',
                tokenless: 'dulaney'
            },{
                display: 'DULANEY VALLEY ROAD',
                tokenized: 'dulaney vly rd',
                tokenless: 'dulaney'
            }], 'name array obtained');

            q.deepEquals(feat.network.type, 'MultiLineString', 'network is MultiLineString');
            q.deepEquals(feat.address.type, 'MultiPoint', 'address is MultiPoint');

            q.equals(feat.id, 1, 'network_cluster id retained');

            q.deepEquals(feat.address.coordinates, [
                [ -76.554825, 39.460839, 1 ],
                [ -76.567178, 39.462854, 2 ],
                [ -76.597763, 39.442952, 3 ],
                [ -76.597381, 39.438022, 4 ],
                [ -76.599005, 39.431047, 5 ],
                [ -76.599332, 39.415862, 6 ]
            ], 'address coordinates contain id');

            q.deepEquals(feat.props, {
                1: {
                    id: 1,
                    number: '100',
                    props: { postcode: '1' },
                    output: false
                },
                2: {
                    id: 2,
                    number: '200',
                    props: { postcode: '2' },
                    output: false
                },
                3: {
                    id: 3,
                    number: '300',
                    props: { postcode: '3' },
                    output: false
                },
                4: {
                    id: 4,
                    number: '400',
                    props: { postcode: '4' },
                    output: true
                },
                5: {
                    id: 5,
                    number: '500',
                    props: { postcode: '5' },
                    output: true
                },
                6: {
                    id: 6,
                    number: '600',
                    props: { postcode: '6' },
                    output: true
                }
            }, 'address property map generated');

            q.end();
        });
    });

    t.test('SplitFeat - from db - close connection', (q) => {
        pool.end();
        q.end();
    });

    t.end();
});
