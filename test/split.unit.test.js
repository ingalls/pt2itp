'use strict';

const test = require('tape');
const turf = require('@turf/turf');
const { Split } = require('../lib/map/split');
const Explode = require('../lib/map/explode');

test('Attach points to line', (t) => {
    const network = turf.featureCollection([turf.lineString([
        [-77.03365445137024, 38.89877350122629],
        [-77.03362226486205, 38.89641047208325]
    ])]);
    const coords = [
        [-77.03396022319794, 38.897909292974276],
        [-77.03331649303436, 38.898510482436876],
        [-77.0334130525589, 38.896919824235354]
    ];
    const props = [2, 1, 3];

    t.deepEqual(Split.attachPoints(network, coords, props), [
        { coords: [-77.03331649303436, 38.898510482436876], dist: 0.02893479619937134, location: 0.029558270297311683, props: 1, segment: 0 },
        { coords: [-77.03396022319794, 38.897909292974276], dist: 0.02747843094101002, location: 0.09581162246877092, props: 2, segment: 0 },
        { coords: [-77.0334130525589, 38.896919824235354], dist: 0.01870470269785991, location: 0.20633234694843797, props: 3, segment: 0 }
    ]);
    t.end();
});


test('Saint Paul Street, VT', (t) => {
    const network = {
        'type': 'FeatureCollection',
        'features': [
            {
                'type': 'Feature',
                'properties': {
                    'id': 342147128,
                    'street': [{ 'display': 'Saint Paul Street', 'priority': 0 }]
                },
                'geometry': {
                    'type': 'MultiLineString',
                    'coordinates': [
                        [
                            [-73.214267,44.4803916],
                            [-73.2142622,44.4803055],
                            [-73.2142116,44.4793873],
                            [-73.214208,44.4793304],
                            [-73.2142041,44.4792602]
                        ],
                        [
                            [-72.5726673,44.260232],
                            [-72.5716138,44.2612611],
                            [-72.5715536,44.2613012],
                            [-72.5714206,44.2613702],
                            [-72.5709758,44.2615557],
                            [-72.5703996,44.2618034],
                            [-72.570306,44.261847]
                        ],
                        [
                            [-73.214195,44.478141],[-73.2141882,44.4780621],[-73.2141052,44.4771038],[-73.2140992,44.4770344]
                        ],
                        [
                            [-73.2140992,44.4770344],[-73.2140918,44.4769527],[-73.2140511,44.4765171],[-73.2140114,44.4759923],[-73.2140035,44.4758836]
                        ],
                        [
                            [-73.2140035,44.4758836],[-73.2139956,44.4757722],[-73.2139827,44.4755908]
                        ],
                        [
                            [-73.2139827, 44.4755908],
                            [-73.2139276, 44.4748129],
                            [-73.2139224, 44.4747401],
                            [-73.2139172, 44.4746687],
                            [-73.2138467, 44.4737084],
                            [-73.2138425, 44.4736514],
                            [-73.2138366, 44.4735648],
                            [-73.2137984, 44.4730058],
                            [-73.2137732, 44.4726371],
                            [-73.2137548, 44.4723674],
                            [-73.2137452, 44.4722259],
                            [-73.213712, 44.4718753],
                            [-73.2137, 44.4718],
                            [-73.213647, 44.471662],
                            [-73.213546, 44.471463],
                            [-73.21346, 44.471338],
                            [-73.2132358, 44.4710998],
                            [-73.2130976, 44.4709523],
                            [-73.212479, 44.4702918],
                            [-73.2117373, 44.4694872],
                            [-73.2111867, 44.4688889],
                            [-73.2099207, 44.4675342],
                            [-73.209785, 44.4673756],
                            [-73.209718, 44.4672983],
                            [-73.2096635, 44.4672337],
                            [-73.208876, 44.4663713],
                            [-73.2078486, 44.4652001],
                            [-73.2077938, 44.4651242]
                        ],
                        [
                            [-73.2143683,44.4792555],[-73.2143733,44.4793253],[-73.2143888,44.4797171],[-73.2144262,44.4803042],[-73.2144325,44.4803863]
                        ]
                    ]
                }
            }
        ]
    };

    const props = [
        '76','80','81','86','95','111','115','117','121','123','125','127','129','131','133','137',
        '150','151','152','156','161','162','164','171','181','183','187','194','195','201','205',
        '210','211','212','213','215','217','218','219','221','227','230','233','249','263','273',
        '275','281','291','305','309','315','322','325','331','336','339','345','354','355','356',
        '357','359','362','363','365','367','368','370','374','375','377','378','383','384','389',
        '390','392','397','398','403','409','410','411','412','415','417','418','421','423','429',
        '433','435','441','445','451','457','463','465','467','471','475','476','477','478','481',
        '484','486','489','492','494','496','500','507','510','512','513','514','516','517','521',
        '522','526','531','539','540','567'];

    const coords = [
        [-73.2138439,44.4778629],[-73.2138603,44.4775296],[-73.2146157,44.4777424],[-73.2138765,44.477396],
        [-73.2143535,44.477467],[-73.2142739,44.4765544],[-73.2142874,44.4764763],[-73.2142832,44.4764347],
        [-73.2142897,44.4763722],[-73.2142743,44.4763055],[-73.2142685,44.4762913],[-73.2142891,44.4763227],
        [-73.2142885,44.4762733],[-73.2142806,44.4762187],[-73.2142727,44.4761667],[-73.2142755,44.4761042],
        [-73.2136442,44.4754997],[-73.2141787,44.4752921],[-73.2136628,44.4753371],[-73.213668,44.4751933],
        [-73.2142067,44.4749662],[-73.2136516,44.4751026],[-73.2136314,44.4749698],[-73.2141462,44.4745908],
        [-73.2141851,44.4745034],[-73.2141839,44.4744063],[-73.214549,44.4742383],[-73.2134055,44.4740625],
        [-73.2141092,44.4739524],[-73.2140962,44.473761],[-73.2140165,44.4734811],[-73.213563,44.4734152],
        [-73.2140756,44.4733226],[-73.2135614,44.4733671],[-73.2140627,44.4732992],[-73.2140869,44.4732194],
        [-73.2140844,44.4731901],[-73.2135551,44.4732387],[-73.2140365,44.4730671],[-73.2140363,44.4730447],
        [-73.2140154,44.4729182],[-73.2131615,44.4727096],[-73.214079,44.4727523],[-73.2141213,44.4723028],
        [-73.2139207,44.4719125],[-73.2139379,44.4717807],[-73.2139292,44.4717345],[-73.2138601,44.4716026],
        [-73.2137783,44.47125],[-73.2135189,44.4708896],[-73.2135031,44.4708285],[-73.2131724,44.4706466],
        [-73.2125363,44.4707732],[-73.2130051,44.4705067],[-73.2128332,44.470323],[-73.2122179,44.4705326],
        [-73.2126234,44.47013],[-73.2125356,44.4700182],[-73.2117482,44.4700816],[-73.2124767,44.4699338],
        [-73.21167,44.4699878],[-73.2122992,44.4697659],[-73.2122193,44.4696606],[-73.211667,44.4699045],
        [-73.2120903,44.4695592],[-73.212056,44.4695221],[-73.2120287,44.4694828],[-73.2116711,44.4697502],
        [-73.2115738,44.4696827],[-73.2115354,44.4695891],[-73.2118877,44.4693088],[-73.2118716,44.4692875]
        ,[-73.2114033,44.4694966],[-73.2116777,44.4691473],[-73.2112385,44.4693462],[-73.2115579,44.4690145],
        [-73.2112005,44.4692283],[-73.2107557,44.4691045],[-73.212427,44.4680969],[-73.2108181,44.4689569],
        [-73.2112958,44.4686996],[-73.2111385,44.4685613],[-73.2107862,44.4688437],[-73.2110771,44.4684897],
        [-73.2106346,44.4686851],[-73.2110288,44.4684228],[-73.2109596,44.4683417],[-73.2105177,44.4685477],
        [-73.2108956,44.4682664],[-73.2108237,44.4681558],[-73.2107021,44.468049],[-73.210624,44.4679733],
        [-73.2106063,44.467962],[-73.2105141,44.4678337],[-73.210383,44.4677352],[-73.2102631,44.4675569],
        [-73.2101125,44.4674212],[-73.2098486,44.4671765],[-73.2097998,44.4671284],[-73.2100511,44.4668103],
        [-73.2096762,44.4668867],[-73.2096182,44.4667817],[-73.2091893,44.4670556],[-73.2095982,44.4667665],
        [-73.2092079,44.4670725],[-73.2095176,44.4666794],[-73.2090271,44.4668867],[-73.2090109,44.4668649],
        [-73.2093653,44.4665688],[-73.2088703,44.4667389],[-73.2088538,44.4667149],[-73.2085524,44.4667332],
        [-73.2087531,44.4665616],[-73.2090749,44.4662037],[-73.2085535,44.4664211],[-73.2084297,44.4663263],
        [-73.2089258,44.4660691],[-73.2083983,44.4663365],[-73.2084058,44.4661855],[-73.2088483,44.4659602],
        [-73.2087317,44.4657923],[-73.2082704,44.4660627],[-73.2081526,44.4659347],[-73.2085534,44.4656133],
        [-73.2084259,44.4654501],[-73.2079183,44.4655926],[-73.2085255,44.4650958]];



    const explode = new Explode();

    const res = Split.attachPoints(explode.join(network), coords, props);

    const counts = new Map();
    for (let i = 0; i < res.length; i++) {
        const j = res[i].segment;
        if (counts.has(j)) {
            counts.set(j, counts.get(j) + 1);
        } else {
            counts.set(j, 1);
        }
    }

    t.equal(counts.get(2), 127);

    t.end();

});

test('Refuse to split multiline string into segments', (t) => {
    const network = turf.featureCollection([turf.lineString([
        [-77.03365445137024, 38.89877350122629],
        [-77.03362226486205, 38.89641047208325]
    ])]);

    t.throws(() => { Split.splitSegments({ network }); }, 'Require LineString');
    t.end();
});

test('Do not split short network into sub-segments', (t) => {
    const network = turf.featureCollection([turf.lineString([
        [-77.03365445137024, 38.89877350122629],
        [-77.03362226486205, 38.89641047208325]
    ])]);

    const cluster = {
        network: network.features[0],
        addressPoints: Split.attachPoints(network, [
            [-77.03396022319794, 38.897909292974276],
            [-77.03331649303436, 38.898510482436876],
            [-77.0334130525589, 38.896919824235354]
        ], [2, 1, 3]),
        intersectionPoints: []
    };
    const result = Split.splitSegments(cluster);
    t.equal(result.length, 1, 'Did not split segment');
    t.end();
});

test('Split long network into sub-segments', (t) => {

    const road = turf.lineString([
        [-77.03641176223755, 38.92910179895564],
        [-77.0355212688446, 38.92708198494835],
        [-77.03518867492676, 38.92108897519732],
        [-77.03475952148438, 38.92060483810483],
        [-77.03469514846802, 38.91911901743697],
        [-77.03448057174683, 38.91813401804748],
        [-77.03458786010742, 38.90135353865269],
        [-77.0336651802063, 38.90132014070886],
        [-77.03365445137024, 38.89212675943535]
    ]);
    const origLength = turf.lineDistance(road);

    const network = turf.featureCollection([road]);
    const cluster = {
        network: network.features[0],
        addressPoints: Split.attachPoints(network, [
            [-77.0334130525589,  38.896919824235354],
            [-77.03396022319794, 38.897909292974276],
            [-77.03331649303436, 38.898510482436876],
            [-77.03479170799254, 38.91460710726654],
            [-77.03479170799254, 38.91469893438498]
        ], [1, 2, 3, 4, 5]),
        intersectionPoints: []
    };
    const result = Split.splitSegments(cluster);
    t.equal(result.length, 9, 'Split segment based on distance');

    const resultLength = result.reduce((a, v) => a + turf.lineDistance(v.network), 0);
    t.equal(resultLength, origLength, 'length is unchanged');

    t.end();
});

test('Split and retain empty segments', (t) => {
    const road = turf.lineString([
        [-77.03641176223755, 38.92910179895564],
        [-77.0355212688446, 38.92708198494835],
        [-77.03518867492676, 38.92108897519732],
        [-77.03475952148438, 38.92060483810483],
        [-77.03469514846802, 38.91911901743697],
        [-77.03448057174683, 38.91813401804748],
        [-77.03458786010742, 38.90135353865269],
        [-77.0336651802063, 38.90132014070886],
        [-77.03365445137024, 38.89212675943535]
    ]);
    const origLength = turf.lineDistance(road);

    const network = turf.featureCollection([road]);
    const cluster = {
        network: network.features[0],
        addressPoints: Split.attachPoints(network, [
            [-77.0334130525589,  38.896919824235354]
        ], [1]),
        intersectionPoints: []
    };
    const result = Split.splitSegments(cluster);
    t.equal(result.length, 9, 'Split segment based on distance');

    const resultLength = result.reduce((a, v) => a + turf.lineDistance(v.network), 0);
    t.equal(resultLength, origLength, 'length is unchanged');

    t.end();
});
